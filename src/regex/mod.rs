// DO NOT EDIT THIS FILE. IT WAS AUTOMATICALLY GENERATED BY:
//
//   ucd-generate.exe regex --sparse --minimize .\dfas\ ((?:<script .*?(?:/>|</script>))|<img .* data-pagespeed-url-hash.*/>)
//
// ucd-generate 0.2.9 is available on crates.io.

#[cfg(target_endian = "big")]
lazy_static::lazy_static! {
    pub static ref REGEX: ::regex_automata::Regex<::regex_automata::SparseDFA<&'static [u8], u32>> = {
        let fwd = {
            #[repr(C)]
            struct Aligned<B: ?Sized> {
                _align: [u8; 0],
                bytes: B,
            }

            static ALIGNED: &Aligned<[u8]> = &Aligned {
                _align: [],
                bytes: *include_bytes!("regex.fwd.bigendian.dfa"),
            };

            unsafe {
                ::regex_automata::SparseDFA::from_bytes(&ALIGNED.bytes)
            }
        };

        let rev = {
            #[repr(C)]
            struct Aligned<B: ?Sized> {
                _align: [u8; 0],
                bytes: B,
            }

            static ALIGNED: &Aligned<[u8]> = &Aligned {
                _align: [],
                bytes: *include_bytes!("regex.rev.bigendian.dfa"),
            };

            unsafe {
                ::regex_automata::SparseDFA::from_bytes(&ALIGNED.bytes)
            }
        };

        ::regex_automata::Regex::from_dfas(fwd, rev)
    };
}

#[cfg(target_endian = "little")]
lazy_static::lazy_static! {
    pub static ref REGEX: ::regex_automata::Regex<::regex_automata::SparseDFA<&'static [u8], u32>> = {
        let fwd = {
            #[repr(C)]
            struct Aligned<B: ?Sized> {
                _align: [u8; 0],
                bytes: B,
            }

            static ALIGNED: &Aligned<[u8]> = &Aligned {
                _align: [],
                bytes: *include_bytes!("regex.fwd.littleendian.dfa"),
            };

            unsafe {
              ::regex_automata::SparseDFA::from_bytes(&ALIGNED.bytes)
            }
        };

        let rev ={
            #[repr(C)]
            struct Aligned<B: ?Sized> {
                _align: [u8; 0],
                bytes: B,
            }

            static ALIGNED: &Aligned<[u8]> = &Aligned {
                _align: [],
                bytes: *include_bytes!("regex.rev.littleendian.dfa"),
            };

            unsafe {
                ::regex_automata::SparseDFA::from_bytes(&ALIGNED.bytes)
            }
        };

        ::regex_automata::Regex::from_dfas(fwd, rev)
    };
}
